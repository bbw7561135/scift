#!/bin/bash
##################################################################
#
#  This file is part of scift (Scientific Fortran Tools).
#  Copyright (C) by authors (2011-2013)
#  
#  Authors (alphabetic order):
#    * Aguirre N.F. (nfaguirrec@gmail.com)  (2011-2013)
#  
#  Contributors (alphabetic order):
#  
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the
#  following conditions are met:
#  
#   * Redistributions of binary or source code must retain
#     the above copyright notice and this list of conditions
#     and/or other materials provided with the distribution.
#   * All advertising materials mentioning features or use of
#     this software must display the following acknowledgement:
#     
#     This product includes software from scift
#     (Scientific Fortran Tools) project and its contributors.
#
##################################################################

# Hay que implementar esto:
# $ fclass fileName addMethod copy:subroutine
# $ fclass fileName addAttribute name:real(8)

template()
{
	local className=$1
	
	cat << EOF
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!
!!  This file is part of scift (Scientific Fortran Tools).
!!  Copyright (C) by authors (`date +%Y`-`date +%Y`)
!!  
!!  Authors (alphabetic order):
!!    * Aguirre N.F. (nfaguirrec@gmail.com)  (`date +%Y`-`date +%Y`)
!!  
!!  Contributors (alphabetic order):
!!  
!!  Redistribution and use in source and binary forms, with or
!!  without modification, are permitted provided that the
!!  following conditions are met:
!!  
!!   * Redistributions of binary or source code must retain
!!     the above copyright notice and this list of conditions
!!     and/or other materials provided with the distribution.
!!   * All advertising materials mentioning features or use of
!!     this software must display the following acknowledgement:
!!     
!!     This product includes software from scift
!!     (Scientific Fortran Tools) project and its contributors.
!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!>
!! @brief
!!
module ${className}_
	implicit none
	private
	
	public :: &
		${className}_test
	
	type, public :: ${className}
		real(8) :: val
		
		contains
			generic :: init => init${className}
			generic :: assignment(=) => copy${className}
			
			procedure :: init${className}
			procedure :: copy${className}
			final :: destroy${className}
			procedure :: str
			procedure :: show
	end type ${className}
	
	contains
	
	!>
	!! @brief Constructor
	!!
	subroutine init${className}( this )
		class(${className}) :: this 
		
	end subroutine init${className}
	
	!>
	!! @brief Copy constructor
	!!
	subroutine copy${className}( this, other )
		class(${className}), intent(inout) :: this
		class(${className}), intent(in) :: other

		this.val = other.val
	end subroutine copy${className}
	
	!>
	!! @brief Destructor
	!!
	subroutine destroy${className}( this )
		type(${className}) :: this
		
	end subroutine destroy${className}
	
	!>
	!! @brief Convert to string
	!!
	function str( this, formatted, prefix ) result( output )
		class(${className}) :: this 
		character(:), allocatable :: output
		logical, optional :: formatted
		character(*), optional :: prefix
		
		logical :: effFormatted
		character(:), allocatable :: effPrefix
		
		integer :: fmt
		character(200) :: fstr
		
		effFormatted = .false.
		if( present(formatted) ) effFormatted = formatted
		
		effPrefix = ""
		if( present(prefix) ) effPrefix = prefix
		
		output = ""
		
		if( .not. effFormatted ) then
#define ITEMS(l,v) output = trim(output)//effPrefix//trim(l)//trim(adjustl(v))
#define ITEMI(l,v) output = trim(output)//l; write(fstr, "(I20)") v; output = trim(output)//trim(adjustl(fstr))
#define ITEMR(l,v) output = trim(output)//l; write(fstr, "(F20.6)") v; output = trim(output)//trim(adjustl(fstr))
#define ITEML(l,v) output = trim(output)//l; write(fstr, "(L3)") v; output = trim(output)//trim(adjustl(fstr))
		
			output = trim(output)//"<${className}:"
! 			ITEMI( "min=", this.min )
! 			ITEMR( ",size=", this.size )
#undef ITEMS
#undef ITEMI
#undef ITEMR
#undef ITEML
			output = trim(output)//">"
		else
#define LINE(l) output = trim(output)//effPrefix//l//new_line('')
#define ITEMS(l,v) output = trim(output)//effPrefix//l; write(fstr, "(x,a)") trim(v); output = trim(output)//trim(fstr)//new_line('')
#define ITEMI(l,v) output = trim(output)//effPrefix//l; write(fstr, "(i20)") v; output = trim(output)//trim(fstr)//new_line('')
#define ITEMR(l,v) output = trim(output)//effPrefix//l; write(fstr, "(f20.6)") v; output = trim(output)//trim(fstr)//new_line('')

			LINE("${className}")
			LINE("---------")
! 			ITEMI( "min=", this.min )
! 			ITEMR( ",size=", this.size )
			LINE("")
#undef LINE
#undef ITEMS
#undef ITEMI
#undef ITEMR
		end if
	end function str
	
	!>
	!! @brief Show 
	!!
	subroutine show( this, unit, formatted )
		class(${className}) :: this
		integer, optional, intent(in) :: unit
		logical, optional :: formatted
		
		integer :: effunit
		logical :: effFormatted
		
		effFormatted = .false.
		if( present(formatted) ) effFormatted = formatted
		
		effunit = 6
		if( present(unit) ) effunit = unit
		
		write(effunit,"(a)") trim(str(this,effFormatted))
	end subroutine show
	
	!>
	!! @brief Test method
	!!
	subroutine ${className}_test()
		
	end subroutine ${className}_test
	
end module ${className}_
EOF
}

usage()
{
	cat << EOF
	usage:
	
	$ fclass ClassName
EOF
}

main()
{
	if [ $# -lt 1 ]
	then
		usage
		exit
	fi
	
	local className=$1
	
	if [ ! -e "$className.f90" ]
	then
		template $className > $className.f90
	else
		echo "## Error ## The output file ($className.f90) already exists, please remove this"
		exit
	fi
}

main $*
