# n = [0:31];
# x = cos(2*pi*n/10);
#  
# x1 = x;
# x2 = [x zeros(1,64-length(x1))];
# x3 = [x zeros(1,128-length(x1))];
# x4 = [x zeros(1,256-length(x1))];
#  
# fft_x1 = abs(fft(x1));
# fft_x2 = abs(fft(x2));
# fft_x3 = abs(fft(x3));
# fft_x4 = abs(fft(x4));
#  
# f1 = [0:length(fft_x1)-1]/length(fft_x1);
# f2 = [0:length(fft_x2)-1]/length(fft_x2);
# f3 = [0:length(fft_x3)-1]/length(fft_x3);
# f4 = [0:length(fft_x4)-1]/length(fft_x4);
#  
# subplot(4,2,1);
# plot(x1,'r-'); axis([0 length(x4) -1.5 1.5]);
# subplot(4,2,2);
# plot(f1,fft_x1);
#  
# subplot(4,2,3);
# plot(x2,'r-'); axis([0 length(x4) -1.5 1.5]);
# subplot(4,2,4);
# plot(f2,fft_x2);
#  
# subplot(4,2,5);
# plot(x3,'r-'); axis([0 length(x4) -1.5 1.5]);
# subplot(4,2,6);
# plot(f3,fft_x3);
#  
# subplot(4,2,7);
# plot(x4,'r-'); axis([0 length(x4) -1.5 1.5]);
# subplot(4,2,8);
# plot(f4,fft_x4);
# 
# pause

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% All rights reserved by Krishna Pillai, http://www.dsplog.com 
% The file may not be re-distributed without explicit authorization
% from Krishna Pillai.
% Checked for proper operation with Octave Version 3.0.0
% Author	: Krishna Pillai
% Email		: krishna@dsplog.com
% Version	: 1.0
% Date		: 8 August 2008
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Matlab/Octave script for plotting the spectrum for a real 
% sinusoidal and a complex sinusoidal. To demonstrate the 
% concept of negative frequency

clear all
close all

f0MHz = 5; % signal frequency
fsMHz = 20; % sampling frequency
N     = 128; % fft size

% generating the time domain signal
# xReal    =   cos(2*pi*f0MHz*[0:N-1]/fsMHz) +   cos(2*pi*0.5*f0MHz*[0:N-1]/fsMHz) ;
# xComplex = 0.5*cos(2*pi*f0MHz*[0:N-1]/fsMHz) - 0.5*j*sin(2*pi*f0MHz*[0:N-1]/fsMHz) + 2.0*sin(2*pi*0.5*f0MHz*[0:N-1]/fsMHz);
xMax = 30.0
xMin = -30.0
nPoints = 512
h = (xMax-xMin)/(nPoints-1)

t = xMin+h*[0:nPoints]
# xReal    =   cos(t.*t).*cos(pi*t/2.0/60.0).*cos(pi*t/2.0/60.0);
xReal    =   sin(0.5*t)
xComplex = 0.0*t

% taking the FFT
xRealF    = (1/nPoints)*fft(xReal,nPoints)
# xComplexF = (1/N)*fft(xComplex,nPoints); 

# w = [-nPoints/2:nPoints/2-1]*h/nPoints
# exactFFT = sqrt(pi/1.0)*cos(w**2/4.0/a-pi/4.0)

figure;
plot([-nPoints/2:nPoints/2-1]*h/nPoints,fftshift(xRealF));
# hold on
# plot([-N/2:N/2-1]*fsMHz/N,fftshift(xComplexF),'m');
xlabel('frequency, MHz')
ylabel('amplitude')
title('frequency response of real and complex sinusoidal signal'); 
legend('real','complex');
grid on 
# axis([-fsMHz/2 fsMHz/2 0 1.2])

# figure;
# plot([-N/2:N/2-1]*fsMHz/N,(fftshift(abs(xRealF))));
# hold on
# plot([-N/2:N/2-1]*fsMHz/N,(fftshift(abs(xComplexF))),'m');
# xlabel('frequency, MHz')
# ylabel('amplitude')
# title('frequency response of real and complex sinusoidal signal'); 
# legend('real','complex');
# grid on 
# axis([-fsMHz/2 fsMHz/2 0 1.2])

pause