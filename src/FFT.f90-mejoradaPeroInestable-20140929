!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!
!!  This file is part of scift (Scientific Fortran Tools).
!!  Copyright (C) by authors (2013-2014)
!!  
!!  Authors (alphabetic order):
!!    * Aguirre N.F. (nfaguirrec@gmail.com)  (2013-2014)
!!  
!!  Contributors (alphabetic order):
!!  
!!  Redistribution and use in source and binary forms, with or
!!  without modification, are permitted provided that the
!!  following conditions are met:
!!  
!!   * Redistributions of binary or source code must retain
!!     the above copyright notice and this list of conditions
!!     and/or other materials provided with the distribution.
!!   * All advertising materials mentioning features or use of
!!     this software must display the following acknowledgement:
!!     
!!     This product includes software from scift
!!     (Scientific Fortran Tools) project and its contributors.
!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

module FFT_
	use GOptions_
	use Math_
	use Grid_
	use CNFunction_
	use RNFunction_
	use RandomUtils_
	implicit none
	include 'fftw/fftw3.f'
	private
	
	public :: &
		FFT_kGrid, &
		FFT_transformBase, &
		FFT_transform, &
		FFT_iTransform, &
		FFT_spectrum, &
		FFT_test
		
	type, public :: FFT
		logical, private :: persist
		class(CNFunction), pointer, private :: func
		integer(8), private :: plan
		integer, private :: type
		integer, private :: nPoints
		real(8), allocatable :: box(:)
		real(8), allocatable :: kbox(:)
		integer, allocatable :: id(:)
		
		contains
			procedure :: init
			final :: destroy
			procedure :: str
			procedure :: show
			generic :: execute => executePersist!, executeNotPersist
			procedure, private :: executePersist
! 			procedure, private :: executeNotPersist
			procedure :: filter
			procedure :: derivative
	end type FFT
	
	contains
	
	!>
	!! @brief Constructor
	!!
	subroutine init( this, func, type, nPoints, persist )
		class(FFT) :: this 
		class(CNFunction), target, intent(in) :: func
		integer, intent(in), optional :: type
		integer, intent(in), optional :: nPoints
		logical, optional, intent(in) :: persist
		
		logical :: effPersist
		
		if( associated(this.func) ) nullify(this.func)
		this.func => func
		
		this.type = FFT_FORWARD
		if( present(type) ) this.type = type
		
		this.nPoints = this.func.nPoints
		if( present(nPoints) ) this.nPoints = nPoints
		
		this.persist = .false.
		if( present(persist) ) this.persist = persist
		
		if( this.persist ) then
			call dfftw_plan_dft_1d( this.plan, this.nPoints, this.func.yArray, this.func.yArray, FFTW_FORWARD, FFTW_ESTIMATE )
			
			if( allocated(this.box) ) deallocate(this.box)
			allocate( this.box(this.nPoints) )
			this.box = this.func.xGrid.data(1:this.nPoints)
			
			if( allocated(this.id) ) deallocate(this.id)
			allocate( this.id(this.nPoints) )
			
			if( allocated(this.kbox) ) deallocate(this.kbox)
			allocate( this.kbox(this.nPoints) )

			call makeIndicesAndFreqs( this.id, this.kbox, this.nPoints )
			this.kbox = this.kbox/this.func.xGrid.stepSize
		end if
	end subroutine init
	
	!>
	!! @brief Destructor
	!!
	subroutine destroy( this )
		type(FFT) :: this
		
		call dfftw_destroy_plan( this.plan )
		
		nullify(this.func)
	end subroutine destroy
	
	!>
	!! @brief
	!!
	function str( this ) result( output )
		class(FFT) :: this 
		character(len=200) :: output
		
		integer :: fmt
		character(len=200) :: strBuffer
		
		output = ""
		
		output = trim(output)//"<FFT:"
		
! 		output = trim(output)//"min="
! 		fmt = int(log10(this.min+1.0))+1
! 		write(strBuffer, "(f<fmt+7>.6)") this.min
! 		output = trim(output)//trim(strBuffer)
! 		
! 		output = trim(output)//",max="
! 		fmt = int(log10(this.max+1.0))+1
! 		write(strBuffer, "(f<fmt+7>.6)") this.max
! 		output = trim(output)//trim(strBuffer)
! 		
! 		output = trim(output)//",h="
! 		fmt = int(log10(this.h+1.0))+1
! 		write(strBuffer, "(f<fmt+7>.6)") this.h
! 		output = trim(output)//trim(strBuffer)
! 		
! 		output = trim(output)//",size="
! 		fmt = int(log10(float(this.size+1)))+1
! 		write(strBuffer, "(i<fmt>)") this.size
! 		output = trim(output)//trim(strBuffer)
		
		output = trim(output)//">"
	end function str
	
	!>
	!! @brief
	!!
	subroutine show( this, unit )
		class(FFT) :: this
		integer, optional, intent(in) :: unit
		
		integer :: effunit
		
		if( present(unit) ) then
			effunit = unit
		else
			effunit = 6
		end if
		
		write(effunit,"(a)") trim(this.str())
	end subroutine show
	
	!>
	!! @brief Organiza los datos para el espectro con frecuencias positivas y negativas
	!!        Rearranges the fft output, moving the zero frequency to the center of the spectrum
	!!        http://www.dsplog.com/2008/08/08/negative-frequency/
	!!
	subroutine makeIndicesAndFreqs( id, freqs, n )
		integer, intent(out) :: id(:)
		real(8), intent(out) :: freqs(:)
		integer, intent(in) :: n
		
		integer :: i, j
		
		j=1
		do i=n/2+1,n
			id(i) = j
			freqs(i) = 2.0_8*MATH_PI*real(i-1-n/2,8)/n
			j = j+1
		end do
		
		if( Math_isOdd(n) ) then
			j=1
			do i=1,n/2
				id(i) = n/2+1+i
				freqs(i) = 2.0_8*MATH_PI*real(j-1-n/2,8)/n
				j = j+1
			end do
		else
			j=1
			do i=1,n/2
				id(i) = n/2+i
				freqs(i) = 2.0_8*MATH_PI*real(j-1-n/2,8)/n
				j = j+1
			end do
		end if
	end subroutine makeIndicesAndFreqs
	
	!>
	!! @brief Gets the Fourier spectrum for the function
	!!
	subroutine executePersist( this )
		class(FFT), intent(in) :: this
		
		real(8) :: normConst
		
		!--------------------------------------------------------------
		! La convencion de normalizacion de acuerdo con wikipedia es:
		! Fourier transform non-unitary, angular frequency
		!--------------------------------------------------------------
		if( this.type == FFT_FORWARD ) then
		
			normConst = (this.func.xGrid.max-this.func.xGrid.min)/this.nPoints
			call dfftw_execute( this.plan )
			
			this.func.yArray = abs(this.func.yArray)
! 			do i=1,nPoints
! 				yVecSorted(i) = abs(yVec( this.id(i) ))*normConst
! 			end do
			
		else if( this.type == FFT_BACKWARD ) then
			
			normConst = (this.func.xGrid.max-this.func.xGrid.min)/this.nPoints/(2.0*Math_PI)
			call dfftw_execute( this.plan )
			
			this.func.yArray = abs(this.func.yArray)
! 			do i=1,nPoints
! 				yVecSorted(i) = abs(yVec( this.id(i) ))*normConst
! 			end do
			
		end if
		
		this.func.yArray = this.func.yArray*normConst
	end subroutine executePersist
	
	!>
	!! @brief Gets the Fourier spectrum for the function
	!!
! 	function executeNotPersist( this, type, lastPoint ) result( output )
! 		class(FFT), intent(in) :: this
! 		integer, intent(in), optional :: type
! 		integer, intent(in), optional :: lastPoint
! 		type(RNFunction) :: output
! 		
! 		integer :: effType
! 		
! 		real(8) :: normConst
! 		integer :: nPoints, i
! 		integer(8) :: plan
! 		
! 		real(8), allocatable :: xVec(:)       ! Frecuencias organizadas para el espectro
! 		complex(8), allocatable :: yVec(:)
! 		real(8), allocatable :: yVecSorted(:)   ! Amplitudes organizadas para el espectro
! 		real(8) :: stepSize
! 		integer, allocatable :: id(:)
! 		
! 		effType = FFT_FORWARD
! 		if( present(type) ) effType = type
! 		
! 		nPoints = this.func.nPoints
! 		if( present(lastPoint) ) nPoints = lastPoint
! 		
! 		allocate( id(nPoints) )
! 		allocate( xVec(nPoints) )
! 		allocate( yVec(nPoints) )
! 		allocate( yVecSorted(nPoints) )
! 		
! 		call makeIndicesAndFreqs( id, xVec, nPoints )
! 		xVec = xVec/this.func.xGrid.stepSize
! 		
! 		yVec = this.func.yArray
! 		
! 		if( effType == FFT_FORWARD ) then
! 			call dfftw_plan_dft_1d( plan, nPoints, yVec, yVec, FFTW_FORWARD, FFTW_ESTIMATE )
! 		else if( effType == FFT_BACKWARD ) then
! 			call dfftw_plan_dft_1d( plan, nPoints, yVec, yVec, FFTW_BACKWARD, FFTW_ESTIMATE )
! 		end if
! 		call dfftw_execute( plan )
! 		call dfftw_destroy_plan( plan )
! 		
! 		!--------------------------------------------------------------
! 		! La convencion de normalizacion de acuerdo con wikipedia es:
! 		! Fourier transform non-unitary, angular frequency
! 		!--------------------------------------------------------------
! 		if( effType == FFT_FORWARD ) then
! 			normConst = (this.func.xGrid.max-this.func.xGrid.min)/nPoints
! 			do i=1,nPoints
! 				yVecSorted(i) = abs(yVec( id(i) ))*normConst
! 			end do
! 		else if( effType == FFT_BACKWARD ) then
! 			normConst = (this.func.xGrid.max-this.func.xGrid.min)/nPoints/(2.0*Math_PI)
! 			do i=1,nPoints
! 				yVecSorted(i) = abs(yVec( id(i) ))*normConst
! 			end do
! 		end if
! 		
! 		call output.fromArrays( xVec, yVecSorted )
! 		
! 		deallocate( id )
! 		deallocate( xVec )
! 		deallocate( yVec )
! 		deallocate( yVecSorted )
! 	end function executeNotPersist
	
	!>
	!! @brief Gets the Fourier spectrum for the funtion
	!!
	function FFT_transformBase( func, type, lastPoint, freqShift ) result( output )
		type(CNFunction), intent(in) :: func
		integer, intent(in), optional :: type
		integer, intent(in), optional :: lastPoint
		logical, intent(in), optional :: freqShift
		type(CNFunction) :: output
		
		integer :: effType
		integer :: nPoints
		logical :: effFreqShift
		
		real(8) :: normConst
		integer :: i
		integer(8) :: plan
		
		real(8), allocatable :: xVec(:)       ! Frecuencias organizadas para el espectro
		complex(8), allocatable :: yVec(:)
		complex(8), allocatable :: yVecSorted(:)   ! Amplitudes organizadas para el espectro
		integer, allocatable :: id(:)
		
		effType = FFT_FORWARD
		if( present(type) ) effType = type
		
		nPoints = func.nPoints
		if( present(lastPoint) ) nPoints = lastPoint
		
		effFreqShift = .true.
		if( present(freqShift) ) effFreqShift = freqShift
		
		allocate( id(nPoints) )
		allocate( xVec(nPoints) )
		allocate( yVec(nPoints) )
		
		call makeIndicesAndFreqs( id, xVec, nPoints )
		xVec = xVec/func.xGrid.stepSize

		yVec = func.yArray(1:nPoints)
		
		if( effType == FFT_FORWARD ) then
			call dfftw_plan_dft_1d( plan, nPoints, yVec, yVec, FFTW_FORWARD, FFTW_ESTIMATE )
		else if( effType == FFT_BACKWARD ) then
			call dfftw_plan_dft_1d( plan, nPoints, yVec, yVec, FFTW_BACKWARD, FFTW_ESTIMATE )
		end if
		call dfftw_execute( plan )
		call dfftw_destroy_plan( plan )
		
		!--------------------------------------------------------------
		! La convencion de normalizacion de acuerdo con wikipedia es:
		! Fourier transform non-unitary, angular frequency
		!--------------------------------------------------------------
		if( effType == FFT_FORWARD ) then
			
			normConst = (maxval(func.xGrid.data)-minval(func.xGrid.data))/nPoints
			
			if( effFreqShift ) then
				allocate( yVecSorted(nPoints) )
				
				do i=1,nPoints
					yVecSorted(i) = yVec( id(i) )*normConst
				end do
				
				call output.fromArrays( xVec, yVecSorted )
				
				deallocate( yVecSorted )
			else
				call output.fromArrays( xVec, yVec*normConst )
			end if
			
		else if( effType == FFT_BACKWARD ) then
		
			normConst = (maxval(func.xGrid.data)-minval(func.xGrid.data))/nPoints/(2.0*Math_PI)
			
			if( effFreqShift ) then
				allocate( yVecSorted(nPoints) )
				
				do i=1,nPoints
					yVecSorted(i) = yVec( id(i) )*normConst
				end do
				
				call output.fromArrays( xVec, yVecSorted )
				
				deallocate( yVecSorted )
			else
				call output.fromArrays( xVec, yVec*normConst )
			end if
			
		end if
		
		deallocate( id )
		deallocate( xVec )
		deallocate( yVec )
	end function FFT_transformBase
	
	!>
	!! @brief Gets the Fourier spectrum for the funtion
	!!
	function FFT_spectrum( func, type, lastPoint ) result( output )
		type(CNFunction), intent(in) :: func
		integer, intent(in), optional :: type
		integer, intent(in), optional :: lastPoint
		type(RNFunction) :: output
		
		type(CNFunction) :: cOutput
		
		cOutput = FFT_transformBase( func, type=type, lastPoint=lastPoint )
		call output.fromGridArray( cOutput.xGrid, abs(cOutput.yArray) )
	end function FFT_spectrum
	
	!>
	!! @brief Gets the Fourier transform for the function
	!!
	function filter( this, kindOfFilter, cutoff ) result( output )
		class(FFT), intent(in) :: this
		integer, intent(in), optional :: kindOfFilter
		real(8), intent(in), optional :: cutoff
		type(CNFunction) :: output
		
		integer :: effKindOfFilter
		real(8) :: effCutoff
		
		integer :: nPoints, i
		
		real(8), allocatable :: xVec(:)
		complex(8), allocatable :: yVec(:)
		real(8), allocatable :: yVecSorted(:)
		real(8) :: stepSize
		integer, allocatable :: id(:)
		
		integer(8) :: FFT_plan
		
		effKindOfFilter = FFT_FILTER_NONE
		if( present(kindOfFilter) ) effKindOfFilter = kindOfFilter
		
		effCutoff = 0.0_8
		if( present(cutoff) ) effCutoff = cutoff
		
		nPoints = this.func.nPoints
		
		allocate( id(nPoints) )
		allocate( xVec(nPoints) )
		allocate( yVec(nPoints) )
		allocate( yVecSorted(nPoints) )
		
		!-----------------------------------------------
		! Se construye el grid en el espacio recíproco
		! @todo Puede que dependa del número de puntos
		!-----------------------------------------------
		do i=1,nPoints/2+1
			xVec(i) = 2.0_8*MATH_PI*real(i-1,8)/this.func.xGrid.stepSize/real(nPoints,8)
		end do
		do i=nPoints/2+2,nPoints
			xVec(i)=-xVec(nPoints+2-i)
		end do
		
		yVec = this.func.yArray
		
		call dfftw_plan_dft_1d( FFT_plan, nPoints, yVec, yVec, FFTW_FORWARD, FFTW_ESTIMATE )
		call dfftw_execute( FFT_plan )
		call dfftw_destroy_plan( FFT_plan )
		
		if( effKindOfFilter /= FFT_FILTER_NONE ) then
		
			select case( effKindOfFilter )
				case( FFT_FILTER_AMPLITUDE )
				
					do i=1,nPoints
						if( abs(yVec(i)) < effCutoff ) then
							yVec(i) = 0.0_8
						end if
					end do
					
				case( FFT_FILTER_AMPLITUDE_FRACTION )
				
					do i=1,nPoints
						if( abs(yVec(i)) < effCutoff*maxval(abs(yVec)) ) then
							yVec(i) = 0.0_8
						end if
					end do
					
				case( FFT_FILTER_FREQUENCY )
				
					do i=1,nPoints
						if( abs(xVec(i)) > effCutoff ) then
							yVec(i) = 0.0_8
						end if
					end do
					
			end select
			
		end if
		
		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		! Gets the inverse Fourier transform
		call dfftw_plan_dft_1d( FFT_plan, nPoints, yVec, yVec, FFTW_BACKWARD, FFTW_ESTIMATE )
		call dfftw_execute( FFT_plan )
		call dfftw_destroy_plan( FFT_plan )
		
		call output.init( this.func.xGrid, yVec/nPoints )
		
		deallocate( id )
		deallocate( xVec )
		deallocate( yVec )
		deallocate( yVecSorted )
	end function filter
	
	!>
	!! @brief Gets the derivative by using FFT
	!!
	function derivative( this, order, kindOfFilter, cutoff ) result( output )
		class(FFT), intent(in) :: this
		integer, intent(in) :: order
		integer, intent(in), optional :: kindOfFilter
		real(8), intent(in), optional :: cutoff
		type(CNFunction) :: output
		
		integer :: effKindOfFilter
		real(8) :: effCutoff
		
		integer :: nPoints, i
		
		real(8), allocatable :: xVec(:)
		complex(8), allocatable :: yVec(:)
		real(8), allocatable :: yVecSorted(:)
		real(8) :: stepSize
		integer, allocatable :: id(:)
		
		integer(8) :: FFT_plan
		
		effKindOfFilter = FFT_FILTER_NONE
		if( present(kindOfFilter) ) effKindOfFilter = kindOfFilter
		
		effCutoff = 0.0_8
		if( present(cutoff) ) effCutoff = cutoff
		
		nPoints = this.func.nPoints
		
		allocate( id(nPoints) )
		allocate( xVec(nPoints) )
		allocate( yVec(nPoints) )
		allocate( yVecSorted(nPoints) )
		
! ! 		!-----------------------------------------------
! ! 		! Se construye el grid en el espacio recíproco
! ! 		! @todo Puede que dependa del número de puntos
! ! 		!-----------------------------------------------
! ! 		do i=1,nPoints/2+1
! ! 			xVec(i) = 2.0_8*MATH_PI*real(i-1,8)/this.func.xGrid.stepSize/real(nPoints,8)
! ! 		end do
! ! 		do i=nPoints/2+2,nPoints
! ! 			xVec(i)=-xVec(nPoints+2-i)
! ! 		end do
		
		yVec = this.func.yArray
		
		call dfftw_plan_dft_1d( FFT_plan, nPoints, yVec, yVec, FFTW_FORWARD, FFTW_ESTIMATE )
		call dfftw_execute( FFT_plan )
		call dfftw_destroy_plan( FFT_plan )
		
		if( effKindOfFilter /= FFT_FILTER_NONE ) then
		
			select case( effKindOfFilter )
				case( FFT_FILTER_AMPLITUDE )
				
					do i=1,nPoints
						if( abs(yVec(i)) < effCutoff ) then
							yVec(i) = 0.0_8
						end if
					end do
					
				case( FFT_FILTER_AMPLITUDE_FRACTION )
				
					do i=1,nPoints
						if( abs(yVec(i)) < effCutoff*maxval(abs(yVec)) ) then
							yVec(i) = 0.0_8
						end if
					end do
					
				case( FFT_FILTER_FREQUENCY )
				
					do i=1,nPoints
						if( abs(xVec(i)) > effCutoff ) then
							yVec(i) = 0.0_8
						end if
					end do
					
			end select
			
		end if
		
! 		yVec = (2.0_8*Math_PI*Math_I*xVec)**order*yVec  ! Esto es si X no lleva el 2pi
		yVec = (Math_I*xVec)**order*yVec
		
		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		! Gets the inverse Fourier transform
		call dfftw_plan_dft_1d( FFT_plan, nPoints, yVec, yVec, FFTW_BACKWARD, FFTW_ESTIMATE )
		call dfftw_execute( FFT_plan )
		call dfftw_destroy_plan( FFT_plan )
		
		call output.init( this.func.xGrid, yVec/nPoints )
		
		deallocate( id )
		deallocate( xVec )
		deallocate( yVec )
		deallocate( yVecSorted )
	end function derivative
	
	!>
	!! @brief
	!!
	function FFT_kGrid( xGrid ) result( kGrid )
		type(Grid), intent(in) :: xGrid
		type(Grid) :: kGrid
		
		integer :: i, j, k
		integer :: n
		real(8) :: h
		
		real(8), allocatable :: kArray(:)
		
		n = xGrid.nPoints
		h = xGrid.stepSize
		
		allocate( kArray(n) )
		
		!-------------------------------------
		! Codigo de Sergio
		! @todo probablemente no se cumpla
		!       para numero impar de puntos
		!-------------------------------------
! 		do i=1,nx/2+1
! 			kx(i) = 2.0_8*MATH_PI*real(i-1,8)/hx/real(nx,8)
! 		end do
! 		do i=nx/2+2,nx
! 			kx(i)=-kx(nx+2-i)
! 		end do

		do i=1,n/2+1
			kArray(i) = 2.0_8*MATH_PI*real(i-1,8)/h/real(n,8)
		end do
		do i=n/2+2,n
			kArray(i)=-kArray(n+2-i)
		end do

		call kGrid.init( kArray )
		
		deallocate( kArray )
	end function FFT_kGrid
	
	!>
	!! @brief Gets the Fourier transform of the funtion func
	!!
	function FFT_transform( func, lastPoint, freqShift ) result( output )
		type(CNFunction), intent(in) :: func
		integer, intent(in), optional :: lastPoint
		logical, intent(in), optional :: freqShift
		type(CNFunction) :: output
		
		output = FFT_transformBase( func, type=FFT_FORWARD, lastPoint=lastPoint, freqShift=freqShift )
	end function FFT_transform
	
	!>
	!! @brief Gets the Fourier transform of the funtion func
	!!
	function FFT_iTransform( func, lastPoint, freqShift ) result( output )
		type(CNFunction), intent(in) :: func
		integer, intent(in), optional :: lastPoint
		logical, intent(in), optional :: freqShift
		type(CNFunction) :: output
		
		output = FFT_transformBase( func, type=FFT_BACKWARD, lastPoint=lastPoint, freqShift=freqShift )
	end function FFT_iTransform
	
	!>
	!! This is neccesary only for FFT_test()
	!!       f = exp(-0.44*x)*sin(x)**2
	!!   df/dx = exp(-0.44*x)*(2.0*sin(x)*cos(x)-0.44*sin(x)**2)
	!! d2f/dx2 = exp(-0.44*x)*(2.0*cos(x)**2 - 1.76*cos(x)*sin(x) - 2.0*sin(x)**2 + 0.1936*sin(x)**2)
	!!
	function funcTest( x ) result( output )
		real(8), intent(in) :: x
		complex(8) :: output
		
! 		output = 1.0_8*sin(1.0_8*x) &  !  1 rad/sec component
! 				+0.6_8*sin(3.0_8*x) &  !  3 rad/sec component
! 				+0.4_8*sin(5.0_8*x) &  !  5 rad/sec component
! 				+0.2_8*sin(RandomUtils_uniform([7.0_8,10.0_8])*x)  !  uniform noise

		output = cos(x**2)

! 		output = exp(-0.44*x)*sin(x)**2.0 + 0.001*sin(30.0*x)  ! noise 30 rad/sec
		
! 		output = 0.5_8*cos(5.0_8*x) - 0.5_8*Math_I*sin(5.0_8*x) + 2.0_8*sin(2.5_8*x)
	end function funcTest
	
	!>
	!! This is neccesary only for FFT_test()
	!!       f = exp(-0.44*x)*sin(x)**2
	!!   df/dx = exp(-0.44*x)*(2.0*sin(x)*cos(x)-0.44*sin(x)**2)
	!! d2f/dx2 = exp(-0.44*x)*(2.0*cos(x)**2 - 1.76*cos(x)*sin(x) - 2.0*sin(x)**2 + 0.1936*sin(x)**2)
	!!
	function funcTestReal( x ) result( output )
		real(8), intent(in) :: x
		real(8) :: output
		
! 		output = 1.0_8*sin(1.0_8*x) &  !  1 rad/sec component
! 				+0.6_8*sin(3.0_8*x) &  !  3 rad/sec component
! 				+0.4_8*sin(5.0_8*x) &  !  5 rad/sec component
! 				+0.2_8*sin(RandomUtils_uniform([7.0_8,10.0_8])*x)  !  uniform noise

! 		output = exp(-0.44*x)*sin(x)**2.0 + 0.001*sin(30.0*x)  ! noise 30 rad/sec
		
		output = 0.5_8*cos(5.0_8*x) - 0.5_8*sin(5.0_8*x) + 2.0_8*sin(2.5_8*x);
	end function funcTestReal
	
	!>
	!! This is neccesary only for FFT_test()
	!!       f = exp(-0.44*x)*sin(x)**2
	!!   df/dx = exp(-0.44*x)*(2.0*sin(x)*cos(x)-0.44*sin(x)**2)
	!! d2f/dx2 = exp(-0.44*x)*(2.0*cos(x)**2 - 1.76*cos(x)*sin(x) - 2.0*sin(x)**2 + 0.1936*sin(x)**2)
	!!
	function dfuncTest( x ) result( output )
		real(8), intent(in) :: x
		complex(8) :: output
		
		output = exp(-0.44*x)*(2.0*sin(x)*cos(x)-0.44*sin(x)**2) + 2.0*Math_PI*30.0*0.001*cos(30.0*x)   ! noise 30 rad/sec Hz
	end function dfuncTest
	
	!>
	!! This is neccesary only for FFT_test()
	!!       f = exp(-0.44*x)*sin(x)**2
	!!   df/dx = exp(-0.44*x)*(2.0*sin(x)*cos(x)-0.44*sin(x)**2)
	!! d2f/dx2 = exp(-0.44*x)*(2.0*cos(x)**2 - 1.76*cos(x)*sin(x) - 2.0*sin(x)**2 + 0.1936*sin(x)**2)
	!!
	function d2funcTest( x ) result( output )
		real(8), intent(in) :: x
		complex(8) :: output
		
		output = exp(-0.44*x)*(2.0*cos(x)**2 - 1.76*cos(x)*sin(x) - 2.0*sin(x)**2 + 0.1936*sin(x)**2)
	end function d2funcTest
	
	!>
	!! @bief test
	!!
	subroutine FFT_test()
		type(Grid) :: xGrid
		type(CNFunction) :: funcA, dFuncA, fftFuncA, fftDFuncA
		type(CNFunction) :: funcB, dFuncB, fftFuncB, fftDFuncB
		type(CNFunction) :: funcAB, dFuncAB, fftFuncAB, fftDFuncAB
		type(RNFunction) :: spectrum
		type(FFT) :: fftF, fftB
		real(8) :: exactValue
		real(8) :: value
		integer :: i, j
		
		
! 		call xGrid.init( 0.0_8, 6.0_8*Math_PI, 1000 )
! 		call xGrid.init( 0.0_8, 20.0_8*Math_PI, 1000 )
! 		call funcA.fromFunction( xGrid, funcTest )
! 		call dFuncA.fromFunction( xGrid, dfuncTest )
! 		call fftF.init( funcA )
! 		
! 		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 		! Para verificar:
! 		!   $ make && ./test > salida
! 		!   gnuplot> plot "salida" i 0 w l lw 2, "" i 1 w l, "" i 2 w l, "" i 3 w l lw 2
! 		! verde y azul deben dar igual
! 		!   gnuplot> plot [-70:70] "salida" i 4 w l
! 		! debe dar picos a 
! ! 		fftFuncA = fftF.filter( kindOfFilter=FFT_FILTER_AMPLITUDE_FRACTION, cutoff=0.01_8 )
! 		fftFuncA = fftF.filter( kindOfFilter=FFT_FILTER_FREQUENCY, cutoff=27.0_8 )
! 		spectrum = fftF.spectrum()
! ! 		fftDFuncA = fftF.derivative( 1, kindOfFilter=FFT_FILTER_AMPLITUDE_FRACTION, cutoff=0.01_8 )
! 		fftDFuncA = fftF.derivative( 1, kindOfFilter=FFT_FILTER_FREQUENCY, cutoff=27.0_8 )
		
! 		write(*,*) "#-----------------------"
! 		write(*,*) "# Function"
! 		write(*,*) "#-----------------------"
! 		call funcA.save()
! 		write(*,*)
! 		write(*,*)
! 		write(*,*) "#-----------------------"
! 		write(*,*) "# FFT Function"
! 		write(*,*) "#-----------------------"
! 		call fftFuncA.save()
! 		write(*,*)
! 		write(*,*)
! 		write(*,*) "#-----------------------"
! 		write(*,*) "# der Function"
! 		write(*,*) "#-----------------------"
! 		call dFuncA.save()
! 		write(*,*)
! 		write(*,*)
! 		write(*,*) "#-----------------------"
! 		write(*,*) "# FFT der Function"
! 		write(*,*) "#-----------------------"
! 		call fftDFuncA.save()
! 		write(*,*)
! 		write(*,*)
! 		write(*,*) "#-----------------------"
! 		write(*,*) "# Spectrum"
! 		write(*,*) "#-----------------------"
! 		call spectrum.save()
		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		
		
		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		! Method No 1
		!----------------
		! You are interested in some of these options:
		!   - Get the fourier transform
		!   - Get the inverse fourier transform
		!   - Get the fourier spectrum
		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		call xGrid.init( -30.0_8, 30.0_8, 60001 )		
		call funcA.fromFunction( xGrid, funcTest )
! 		call funcA.fromFile( "salida.dat" )
		call funcA.save( "funcA-method1-orig.dat" )
		
		fftFuncA = FFT_transform( funcA )
		call fftFuncA.save( "funcA-method1-fft.dat" )
		
		fftFuncA = FFT_transform( funcA, freqShift=.false. )
		funcA = FFT_iTransform( fftFuncA, freqShift=.false. )
		call funcA.save( "funcA-method1-rebuild.dat" )
		
		spectrum = FFT_spectrum( funcA )
		
		call spectrum.save( "funcA-method1-spectrum.dat" )
		
		write(*,"(A)") "gnuplot> plot 'funcA-method1-orig.dat' w l ls 1, 'funcA-method1-rebuild.dat' w l ls 3"
		write(*,"(A)") "gnuplot> plot 'funcA-method1-fft.dat' w l ls 1, '' u 1:3 w l ls 2"
		write(*,"(A)") "gnuplot> plot 'funcA-method1-spectrum.dat' w l ls 1"
		
! 		!---------------------------------------------
! 		! Por ejemplo:
! 		!   - Calculando la derivada de una función
! 		!---------------------------------------------
! 		call funcA.fromFunction( xGrid, funcTest )
! 		
! 		fftFuncA = FFT_transform( funcA )
! 		fftDFuncA = fftFuncA*( fftFuncA.xGrid*Math_I )**1.0
! 		dFuncA = FFT_iTransform( fftDFuncA )
		
! 		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 		! Method No 2
! 		!----------------
! 		! Para ir i volver, no se debe sincronizar el grid
! 		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! 		call funcA.fromFunction( xGrid, funcTest )
! 		call funcB.fromFunction( xGrid, funcTestReal )
! 		
! 		fftFuncA = FFT_calculate( funcA )
! 		fftFuncB = FFT_calculate( funcB )
! 		
! 		fftFuncAB = fftFuncA*fftFuncB
! 		
! 		funcAB = iFFT_calculate( fftFuncAB )
! 		
! 		call funcAB.save( "funcAB-method1.dat" )
! 		
! 		! ... o ... ( Ahorrandose la función fftFuncAB )
! 		
! 		call funcA.fromFunction( xGrid, Math_ubox )
! 		call funcB.fromFunction( xGrid, Math_ubox )
! 		call funcAB.fromGrid( xGrid )
! 		
! 		call fftB.init( funcAB, type=FFT_BACKWARD )
! 		
! 		funcAB = FFT_calculate( funcA )*FFT_calculate( funcB )
! 		
! 		call fftB.execute( funcAB )
! 		
! 		call funcAB.save( "funcAB-method2.dat" )
		
! 		call fftF.init( funcA, persist=.true. )
! 		call fftB.init( funcA, persist=.true. )
! 		
! 		call funcA.save()
! 		call fftF.executePersist()
! 		call funcA.save()
! 		call fftB.executePersist()
! 		call funcA.save()
		
	end subroutine FFT_test
	
end module FFT_
