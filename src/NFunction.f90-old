!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!
!!  This file is part of scift (Scientific Fortran Tools).
!!  Copyright (C) by authors (2010-2014)
!!  
!!  Authors (alphabetic order):
!!    * Aguirre N.F. (nfaguirrec@gmail.com)  (2010-2014)
!!  
!!  Contributors (alphabetic order):
!!  
!!  Redistribution and use in source and binary forms, with or
!!  without modification, are permitted provided that the
!!  following conditions are met:
!!  
!!   * Redistributions of binary or source code must retain
!!     the above copyright notice and this list of conditions
!!     and/or other materials provided with the distribution.
!!   * All advertising materials mentioning features or use of
!!     this software must display the following acknowledgement:
!!     
!!     This product includes software from scift
!!     (Scientific Fortran Tools) project and its contributors.
!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

module NFunction_
	use Grid_
	use String_
	use IOStream_
	implicit none
	private
	
	public :: &
		NFunction_test
	
	type, public:: NFunction
		integer :: size
		type(Grid) :: xGrid
		real(8), allocatable :: yArray(:)
		
		contains
			generic :: init => fromArrays, fromGridArray, fromFunction, fromFile, fromFStream
			procedure :: fromArrays
			procedure :: fromGridArray
			procedure :: fromFunction
			procedure :: fromFile
			procedure :: fromFStream
			generic :: assignment(=) => copy
			procedure :: copy
			final :: destroyNFunction
			
			procedure :: addition
			procedure :: subtraction
			procedure :: multiplication
			procedure :: division
			procedure :: exponentiation
			
			procedure :: additionFC
			procedure :: subtractionFC
			procedure :: multiplicationFC
			procedure :: divisionFC
			procedure :: exponentiationFC
			
			generic :: operator(+) => addition, additionFC
			generic :: operator(-) => subtraction, subtractionFC
			generic :: operator(*) => multiplication, multiplicationFC
			generic :: operator(/) => division, divisionFC
			generic :: operator(**) => exponentiation, exponentiationFC
			
			procedure :: str
			procedure :: show
			procedure :: save
			procedure :: toFStream
			procedure :: setUnits
	end type NFunction
	
	interface
		function prototypeFunction( x ) result( output )
			real(8), intent(in) :: x
			real(8) :: output
		end function prototypeFunction
	end interface
	
	contains
	
	!>
	!! @brief Constructor
	!!
	subroutine fromArrays( this, xArray, yArray, units )
		class(NFunction) :: this 
		real(8), intent(in) :: xArray(:)
		real(8), intent(in) :: yArray(:)
		real(8), optional, intent(in) :: units(2)
		
		integer :: i
		real(8) :: unitsEff(2)
		
		unitsEff = [1.0_8, 1.0_8]
		if( present(units) ) then
			unitsEff = units
		end if
		
		if( size(xArray) /= size(yArray) ) then
			write(*,*) "### ERROR ### NFunction.fromArrays: The xArray's size should be equal to yArray's size (", size(xArray),"/=", size(yArray), ")"
			stop
		end if
		
		this.size = size(xArray)
		call this.xGrid.init( xArray )
		call this.xGrid.setUnits( unitsEff(1) )
		
		if( allocated(this.yArray) ) deallocate(this.yArray)
		allocate( this.yArray( size(xArray) ) )
		
		this.yArray = yArray*unitsEff(2)
	end subroutine fromArrays
	
	!>
	!! @brief Constructor
	!!
	subroutine fromGridArray( this, xGrid, yArray, units )
		class(NFunction) :: this 
		type(Grid), intent(in) :: xGrid
		real(8), intent(in) :: yArray(:)
		real(8), optional, intent(in) :: units(2)
		
		integer :: i
		real(8) :: unitsEff(2)
		
		unitsEff = [1.0_8, 1.0_8]
		if( present(units) ) then
			unitsEff = units
		end if
		
		this.size = xGrid.size
		this.xGrid = xGrid
		call this.xGrid.setUnits( unitsEff(1) )
		
		if( xGrid.size /= size(yArray) ) then
			write(*,*) "### ERROR ### NFunction.fromGridArray: The xArray's size should be equal to yArray's size (", xGrid.size,"/=", size(yArray), ")"
			stop
		end if
		
		if( allocated(this.yArray) ) deallocate(this.yArray)
		allocate( this.yArray(xGrid.size) )
		
		this.yArray = yArray*unitsEff(2)
	end subroutine fromGridArray
	
	!>
	!! @brief Constructor
	!!
	subroutine fromFunction( this, xGrid, func, units )
		class(NFunction) :: this 
		type(Grid), intent(in) :: xGrid
		procedure(prototypeFunction) :: func
		real(8), optional, intent(in) :: units(2)
		
		integer :: i
		real(8) :: unitsEff(2)
		
		if( present(units) ) then
			unitsEff = units
		else
			unitsEff = [1.0_8, 1.0_8]
		end if
		
		this.size = xGrid.size
		this.xGrid = xGrid
		call this.xGrid.setUnits( unitsEff(1) )
		
		if( allocated(this.yArray) ) deallocate(this.yArray)
		allocate( this.yArray(this.size) )
		
		do i=1,this.size
			this.yArray(i) = func( xGrid.data(i) )*unitsEff(2)
		end do
	end subroutine fromFunction
	
	!>
	!! @brief Constructor
	!! @todo No esta implementado la selecciÃ³n de la columna
	!!
	subroutine fromFile( this, ifileName, columns, cComments, units )
		class(NFunction) :: this 
		character(*), intent(in) :: ifileName
		integer, optional, intent(in) :: columns(2)
		character(*), optional, intent(in) :: cComments
		real(8), optional, intent(in) :: units(2)
		
		type(IFStream) :: ifile
		real(8) :: unitsEff(2)
		
		if( present(units) ) then
			unitsEff = units
		else
			unitsEff = [1.0_8, 1.0_8]
		end if
		
		call ifile.init( ifileName )
		
		if( present(columns) .and. present(cComments) .and. present(units) ) then
			call this.fromFStream( ifile, columns, cComments, units )
		else if( present(columns) .and. present(cComments) ) then
			call this.fromFStream( ifile, columns, cComments )
		else if( present(columns) .and. present(cComments) ) then
			call this.fromFStream( ifile, columns )
		else
			call this.fromFStream( ifile )
		end if
		
		call ifile.destroy()
	end subroutine fromFile
	
	!>
	!! @brief Constructor
	!!
	subroutine fromFStream( this, stream, columns, cComments, units )
		class(NFunction) :: this 
		type(IFStream), intent(in) :: stream
		integer, optional, intent(in) :: columns(2)
		character(*), optional, intent(in) :: cComments
		real(8), optional, intent(in) :: units(2)
		
		integer :: nData
		integer :: columnsEff(2)
		character(:), allocatable :: cCommentsEff
		character(:), allocatable :: line
		type(String) :: buffer
		character(20), allocatable :: tokens(:)
		real(8), allocatable :: x(:), y(:)
		real(8) :: unitsEff(2)
		integer :: i
		
		if( present(cComments) ) then
			cCommentsEff = cComments
		else
			cCommentsEff = "#"
		end if
		
		if( present(columns) ) then
			columnsEff = columns
		else
			columnsEff = [1,2]
		end if
		
		if( present(units) ) then
			unitsEff = units
		else
			unitsEff = [1.0_8, 1.0_8]
		end if
		
		! El peor de los casos es que todas las lineas sean datos
		allocate( x(stream.numberOfLines) )
		allocate( y(stream.numberOfLines) )
		
		nData = 1
		do while( .not. stream.eof() )
			line = stream.readLine( cCommentsEff )
			
			if( len(line) /= 0 ) then
				call buffer.fromFString( line )
				call buffer.split( tokens, " " )
				
				if( columnsEff(1) <= size(tokens) .and. columnsEff(2) <= size(tokens) ) then
					if( len(trim(tokens(columnsEff(1)))) /= 0 .and. len(trim(tokens(columnsEff(2)))) /= 0 ) then
						read( tokens(columnsEff(1)),* ) x(nData)
						read( tokens(columnsEff(2)),* ) y(nData)
						nData = nData + 1
					end if
				end if
			end if
		end do
			
		this.size = nData-1
		call this.xGrid.fromArray( x(1:nData-1) )
		
		if( allocated(this.yArray) ) deallocate(this.yArray)
		allocate( this.yArray(nData-1) )
		this.yArray = y(1:nData-1)
		
		call this.setUnits( unitsEff )
		
		deallocate(x)
		deallocate(y)
	end subroutine fromFStream
	
	!>
	!! @brief Copy constructor
	!!
	subroutine copy( this, other )
		class(NFunction), intent(inout) :: this
		type(NFunction), intent(in) :: other
		
		this.size = other.size
		call this.xGrid.copy( other.xGrid )
		
		if( allocated(this.yArray) ) deallocate( this.yArray )
		allocate( this.yArray(this.size) )
		
		this.yArray = other.yArray
	end subroutine copy
	
	!>
	!! @brief Destructor
	!!
	subroutine destroyNFunction( this )
		type(NFunction) :: this
		
		this.size = -1
! 		call this.xGrid.destroy()
		
		if( allocated(this.yArray) ) deallocate( this.yArray )
	end subroutine destroyNFunction
	
	!>
	!! @brief
	!!
	function addition( this, other ) result( output )
		class(NFunction), intent(in) :: this
		class(NFunction), intent(in) :: other
		type(NFunction) :: output
		
		if( this.size /= other.size ) then
			write(*,*) "## ERROR ## the Numerical Functions have not the same size"
			stop
		end if
		
		call output.copy( this )
		output.yArray = this.yArray + other.yArray
	end function addition
	
	!>
	!! @brief
	!!
	function additionFC( this, constant ) result( output )
		class(NFunction), intent(in) :: this
		real(8), intent(in) :: constant
		type(NFunction) :: output
		
		call output.copy( this )
		output.yArray = this.yArray+constant
	end function additionFC
	
	!>
	!! @brief
	!!
	function subtraction( this, other ) result( output )
		class(NFunction), intent(in) :: this
		type(NFunction), intent(in) :: other
		type(NFunction) :: output
		
		if( this.size /= other.size ) then
			write(*,*) "## ERROR ## the Numerical Functions have not the same size"
			stop
		end if
		
		call output.copy( this )
		output.yArray = this.yArray - other.yArray
	end function subtraction
	
	!>
	!! @brief
	!!
	function subtractionFC( this, constant ) result( output )
		class(NFunction), intent(in) :: this
		real(8), intent(in) :: constant
		type(NFunction) :: output
		
		call output.copy( this )
		output.yArray = this.yArray-constant
	end function subtractionFC
	
	!>
	!! @brief
	!!
	function multiplication( this, other ) result( output )
		class(NFunction), intent(in) :: this
		type(NFunction), intent(in) :: other
		type(NFunction) :: output
		
		if( this.size /= other.size ) then
			write(*,*) "## ERROR ## the Numerical Functions have not the same size"
			stop
		end if
		
		call output.copy( this )
		output.yArray = this.yArray*other.yArray
	end function multiplication
	
	!>
	!! @brief
	!!
	function multiplicationFC( this, constant ) result( output )
		class(NFunction), intent(in) :: this
		real(8), intent(in) :: constant
		type(NFunction) :: output
		
		call output.copy( this )
		output.yArray = this.yArray*constant
	end function multiplicationFC
	
	!>
	!! @brief
	!!
	function division( this, other ) result( output )
		class(NFunction), intent(in) :: this
		type(NFunction), intent(in) :: other
		type(NFunction) :: output
		
		if( this.size /= other.size ) then
			write(*,*) "## ERROR ## the Numerical Functions have not the same size"
			stop
		end if
		
		call output.copy( this )
		output.yArray = this.yArray/other.yArray
	end function division
	
	!>
	!! @brief
	!!
	function divisionFC( this, constant ) result( output )
		class(NFunction), intent(in) :: this
		real(8), intent(in) :: constant
		type(NFunction) :: output
		
		call output.copy( this )
		output.yArray = this.yArray/constant
	end function divisionFC
	
	!>
	!! @brief
	!!
	function exponentiation( this, other ) result( output )
		class(NFunction), intent(in) :: this
		type(NFunction), intent(in) :: other
		type(NFunction) :: output
		
		if( this.size /= other.size ) then
			write(*,*) "## ERROR ## the Numerical Functions have not the same size"
			stop
		end if
		
		call output.copy( this )
		output.yArray = this.yArray**other.yArray
	end function exponentiation
	
	!>
	!! @brief
	!!
	function exponentiationFC( this, constant ) result( output )
		class(NFunction), intent(in) :: this
		real(8), intent(in) :: constant
		type(NFunction) :: output
		
		call output.copy( this )
		output.yArray = this.yArray**constant
	end function exponentiationFC
	
	!>
	!! @brief String representation of the object
	!!
	function str( this ) result( output )
		class(NFunction) :: this 
		character(len=200) :: output
		
		integer :: fmt
		character(len=200) :: strBuffer
		
		output = ""
		
		output = trim(output)//"<NFunction:"
		
		output = trim(output)//this.xGrid.str()
		
! 		output = trim(output)//",max="
! 		fmt = int(log10(this.max+1.0))+1
! 		write(strBuffer, "(f<fmt+7>.6)") this.max
! 		output = trim(output)//trim(strBuffer)
! 		
! 		output = trim(output)//",h="
! 		fmt = int(log10(this.h+1.0))+1
! 		write(strBuffer, "(f<fmt+7>.6)") this.h
! 		output = trim(output)//trim(strBuffer)
! 		
! 		output = trim(output)//",size="
! 		fmt = int(log10(float(this.size+1)))+1
! 		write(strBuffer, "(i<fmt>)") this.size
! 		output = trim(output)//trim(strBuffer)
		
		output = trim(output)//">"
	end function str
	
	!>
	!! Write the string representation of the object
	!! in a selected unit
	!!
	subroutine show( this, unit )
		class(NFunction) :: this
		integer, optional, intent(in) :: unit
		
		integer :: unitEff
		
		if( present(unit) ) then
			unitEff = unit
		else
			unitEff = 6
		end if
		
		write(unitEff,"(a)") trim(str(this))
	end subroutine show
	
	!>
	!! Save the data in two column format in a
	!! selected unit
	!!
	subroutine save( this, oFileName, units, append )
		class(NFunction) :: this
		character(*), optional, intent(in) :: oFileName
		real(8), optional, intent(in) :: units(2)
		logical, optional, intent(in) :: append
		
		logical :: effAppend
		
		type(OFStream) :: ofile
		
                effAppend = .false.
                if( present(append) ) effAppend = append
		
		if( present(units) .and. present(oFileName) ) then
			call ofile.init( oFileName, append=effAppend )
			call this.toFStream( ofile, units )
			call ofile.close()
		else if( present(oFileName) ) then
			call ofile.init( oFileName, append=effAppend )
			call this.toFStream( ofile )
			call ofile.close()
		else
			call toFStream( this )
		end if
		
	end subroutine save
	
	!>
	!! Save the data in two column format in a
	!! selected unit
	!!
	subroutine toFStream( this, ofile, units )
		class(NFunction) :: this
		type(OFStream), optional, intent(in) :: ofile
		real(8), optional, intent(in) :: units(2)
		
		integer :: unitEff
		real(8) :: unitsEff(2)
		integer :: i
		
		if( present(ofile) ) then
			unitEff = ofile.unit
		else
			unitEff = STDOUT
		end if
		
		if( present(units) ) then
			unitsEff = units
		else
			unitsEff = [1.0_8, 1.0_8]
		end if
		
		write(unitEff,"(a)") "#"//trim(str(this))
		
		do i=1,this.size
			write(unitEff,"(e15.7,e15.7)") this.xGrid.data(i)/unitsEff(1), this.yArray( i )/unitsEff(2)
		end do
		
		write(unitEff,"(a)") ""
		write(unitEff,"(a)") ""
	end subroutine toFStream
	
	!>
	!! @brief
	!!
	subroutine setUnits( this, units )
		class(NFunction) :: this
		real(8), intent(in) :: units(2)
		
		call this.xGrid.setUnits( units(1) )
		this.yArray = this.yArray*units(2)
	end subroutine setUnits
	
	!>
	!! This is neccesary only for NFunction_test()
	!!       f = exp(-0.44*x)*sin(x)**2
	!!   df/dx = exp(-0.44*x)*(2.0*sin(x)*cos(x)-0.44*sin(x)**2)
	!! d2f/dx2 = exp(-0.44*x)*(2.0*cos(x)**2 - 1.76*cos(x)*sin(x) - 2.0*sin(x)**2 + 0.1936*sin(x)**2)
	!!
	function funcTest( x ) result( output )
		real(8), intent(in) :: x
		real(8) :: output
		
		output = exp(-0.44*x)*sin(x)**2.0_8
	end function funcTest
	
	!>
	!! This is neccesary only for NFunction_test()
	!!       f = exp(-0.44*x)*sin(x)**2
	!!   df/dx = exp(-0.44*x)*(2.0*sin(x)*cos(x)-0.44*sin(x)**2)
	!! d2f/dx2 = exp(-0.44*x)*(2.0*cos(x)**2 - 1.76*cos(x)*sin(x) - 2.0*sin(x)**2 + 0.1936*sin(x)**2)
	!!
	function dfuncTest( x ) result( output )
		real(8), intent(in) :: x
		real(8) :: output
		
		output = exp(-0.44*x)*(2.0*sin(x)*cos(x)-0.44*sin(x)**2)
	end function dfuncTest
	
	!>
	!! This is neccesary only for NFunction_test()
	!!       f = exp(-0.44*x)*sin(x)**2
	!!   df/dx = exp(-0.44*x)*(2.0*sin(x)*cos(x)-0.44*sin(x)**2)
	!! d2f/dx2 = exp(-0.44*x)*(2.0*cos(x)**2 - 1.76*cos(x)*sin(x) - 2.0*sin(x)**2 + 0.1936*sin(x)**2)
	!!
	function d2funcTest( x ) result( output )
		real(8), intent(in) :: x
		real(8) :: output
		
		output = exp(-0.44*x)*(2.0*cos(x)**2 - 1.76*cos(x)*sin(x) - 2.0*sin(x)**2 + 0.1936*sin(x)**2)
	end function d2funcTest
	
	!>
	!! This is neccesary only for NFunction_test()
	!!
	function funcTest2( x ) result( output )
		real(8), intent(in) :: x
		real(8) :: output
		
		output = sin(x)
	end function funcTest2
	
	!>
	!! Test method of this class
	!!
	subroutine NFunction_test()
		type(Grid) :: xGrid
		type(IFStream) :: ifile
		type(OFStream) :: ofile
		type(NFunction) :: nFunc
		type(NFunction) :: nFunc2
		type(NFunction) :: nFunc3
		real(8) :: value
		real(8), allocatable :: data(:)
		integer :: i
		
		call xGrid.init( 1.0_8, 10.0_8, 100 )
		call xGrid.show()
		
		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		! Test from function
		write(*,*) "---"
		write(*,*) "Testing from function"
		write(*,*) "---"
		
		call nFunc.fromFunction( xGrid, func=funcTest )
		call nFunc.show()
		call nFunc.save( "salida1" )
		
		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		! Test for copy constructor
		write(*,*) "---"
		write(*,*) "Testing copy constructor"
		write(*,*) "---"
		
		call nFunc2.copy( nFunc )
		call nFunc2.show()
		
		call ofile.init( "salida2" )
		call nFunc.toFStream( ofile )
		call ofile.destroy()
		
		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		! Test from array
		write(*,*) "---"
		write(*,*) "Testing from array"
		write(*,*) "---"
		
		allocate( data(xGrid.size) )
		do i=1,xGrid.size
			data(i) = funcTest( xGrid.data(i) )
		end do
		
		call nFunc.fromGridArray( xGrid, yArray=data )
		call nFunc.show()
		call nFunc.save( "salida3" )
		
		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		! Test from IFStream
! 		write(*,*) "---"
! 		write(*,*) "Testing from IFStream"
! 		write(*,*) "---"
! 		
! 		call ifile.init( "morse.dat" )
! 		call nFunc.fromFStream( ifile )
! 		call nFunc.show()
! 		call ifile.destroy()
! 		call nFunc.save( "salida4" )
		
		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		! Test operators
		write(*,*) "---"
		write(*,*) "Testing operators"
		write(*,*) "---"
		
		call xGrid.init( 1.0_8, 10.0_8, 100 )
		call nFunc.fromFunction( xGrid, func=funcTest )
		call nFunc2.fromFunction( xGrid, func=funcTest2 )
		call nFunc.save( "salidaF1" )
		call nFunc2.save( "salidaF2" )
		
		nFunc3 = nFunc+nFunc2
		call nFunc3.save( "salidaF1aF2" )
		
		nFunc3 = nFunc+3.0_8
		call nFunc3.save( "salidaF1a3.0" )
		
		nFunc3 = nFunc-nFunc2
		call nFunc3.save( "salidaF1mF2" )
		
		nFunc3 = nFunc-3.0_8
		call nFunc3.save( "salidaF1m3.0" )
		
		nFunc3 = nFunc*nFunc2
		call nFunc3.save( "salidaF1pF2" )
		
		nFunc3 = nFunc*3.0_8
		call nFunc3.save( "salidaF1p3.0" )
		
		nFunc3 = nFunc/nFunc2
		call nFunc3.save( "salidaF1dF2" )
		
		nFunc3 = nFunc/3.0_8
		call nFunc3.save( "salidaF1d3.0" )
		
		nFunc3 = nFunc**nFunc2
		call nFunc3.save( "salidaF1ppF2" )
		
		nFunc3 = nFunc**2.0_8
		call nFunc3.save( "salidaF1pp3.0" )
	end subroutine NFunction_test
	
end module NFunction_
