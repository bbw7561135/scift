!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!
!!  This file is part of scift (Scientific Fortran Tools).
!!  Copyright (C) by authors (2010-2014)
!!  
!!  Authors (alphabetic order):
!!    * Aguirre N.F. (nfaguirrec@gmail.com)  (2010-2014)
!!  
!!  Contributors (alphabetic order):
!!  
!!  Redistribution and use in source and binary forms, with or
!!  without modification, are permitted provided that the
!!  following conditions are met:
!!  
!!   * Redistributions of binary or source code must retain
!!     the above copyright notice and this list of conditions
!!     and/or other materials provided with the distribution.
!!   * All advertising materials mentioning features or use of
!!     this software must display the following acknowledgement:
!!     
!!     This product includes software from scift
!!     (Scientific Fortran Tools) project and its contributors.
!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

module CNFunction_
	use GOptions_
	use Grid_
	use String_
	use IOStream_
	implicit none
	private
	
	public :: &
		CNFunction_test
		
!>
!! This class use the List template declared into List.h90 file,
!! please take a look to this file for details
!!
#define NFunction CNFunction
#define __TYPE_VALUE__ complex(8)
#define __ADD_METHODS__
#define __ID_TYPE__ 1
#include "NFunction.h90"
#undef NFunction
#undef __TYPE_VALUE__
#undef __ADD_METHODS__
#undef __ID_TYPE__
	
	!>
	!! @brief String representation of the object
	!!
	function str( this ) result( output )
		class(CNFunction) :: this 
		character(len=200) :: output
		
		integer :: fmt
		character(len=200) :: strBuffer
		
		output = ""
		
		output = trim(output)//"<CNFunction:"
		
		output = trim(output)//this.xGrid.str()
		
! 		output = trim(output)//",max="
! 		fmt = int(log10(this.max+1.0))+1
! 		write(strBuffer, "(f<fmt+7>.6)") this.max
! 		output = trim(output)//trim(strBuffer)
! 		
! 		output = trim(output)//",h="
! 		fmt = int(log10(this.h+1.0))+1
! 		write(strBuffer, "(f<fmt+7>.6)") this.h
! 		output = trim(output)//trim(strBuffer)
! 		
! 		output = trim(output)//",size="
! 		fmt = int(log10(float(this.size+1)))+1
! 		write(strBuffer, "(i<fmt>)") this.size
! 		output = trim(output)//trim(strBuffer)
		
		output = trim(output)//">"
	end function str
	
	!>
	!! This is neccesary only for CNFunction_test()
	!!       f = exp(-0.44*x)*sin(x)**2
	!!   df/dx = exp(-0.44*x)*(2.0*sin(x)*cos(x)-0.44*sin(x)**2)
	!! d2f/dx2 = exp(-0.44*x)*(2.0*cos(x)**2 - 1.76*cos(x)*sin(x) - 2.0*sin(x)**2 + 0.1936*sin(x)**2)
	!!
	function funcTest( x ) result( output )
		real(8), intent(in) :: x
		complex(8) :: output
		
		output = exp(-0.44*x)*sin(x)**2.0_8 + cmplx(0.0_8,1.0_8)*cos(x)
	end function funcTest
	
	!>
	!! This is neccesary only for CNFunction_test()
	!!       f = exp(-0.44*x)*sin(x)**2
	!!   df/dx = exp(-0.44*x)*(2.0*sin(x)*cos(x)-0.44*sin(x)**2)
	!! d2f/dx2 = exp(-0.44*x)*(2.0*cos(x)**2 - 1.76*cos(x)*sin(x) - 2.0*sin(x)**2 + 0.1936*sin(x)**2)
	!!
	function dfuncTest( x ) result( output )
		real(8), intent(in) :: x
		complex(8) :: output
		
		output = exp(-0.44*x)*(2.0*sin(x)*cos(x)-0.44*sin(x)**2) - cmplx(0.0_8,1.0_8)*sin(x)
	end function dfuncTest
	
	!>
	!! This is neccesary only for CNFunction_test()
	!!       f = exp(-0.44*x)*sin(x)**2
	!!   df/dx = exp(-0.44*x)*(2.0*sin(x)*cos(x)-0.44*sin(x)**2)
	!! d2f/dx2 = exp(-0.44*x)*(2.0*cos(x)**2 - 1.76*cos(x)*sin(x) - 2.0*sin(x)**2 + 0.1936*sin(x)**2)
	!!
	function d2funcTest( x ) result( output )
		real(8), intent(in) :: x
		complex(8) :: output
		
		output = exp(-0.44*x)*(2.0*cos(x)**2 - 1.76*cos(x)*sin(x) - 2.0*sin(x)**2 + 0.1936*sin(x)**2) - cmplx(0.0_8,1.0_8)*cos(x)
	end function d2funcTest
	
	!>
	!! This is neccesary only for CNFunction_test()
	!!
	function funcTest2( x ) result( output )
		real(8), intent(in) :: x
		complex(8) :: output
		
		output = sin(x) + cmplx(0.0_8,1.0_8)*cos(x)
	end function funcTest2
	
	!>
	!! Test method of this class
	!!
	subroutine CNFunction_test()
		type(Grid) :: xGrid
		type(IFStream) :: ifile
		type(OFStream) :: ofile
		type(CNFunction) :: nFunc
		type(CNFunction) :: nFunc2
		type(CNFunction) :: nFunc3
		complex(8) :: value
		complex(8), allocatable :: data(:)
		integer :: i
		
		call xGrid.init( 1.0_8, 10.0_8, 100 )
		call xGrid.show()
		
		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		! Test from function
		write(*,*) "---"
		write(*,*) "Testing from function"
		write(*,*) "---"
		
		call nFunc.fromFunction( xGrid, func=funcTest )
		call nFunc.show()
		call nFunc.save( "salida1" )
		
		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		! Test for copy constructor
		write(*,*) "---"
		write(*,*) "Testing copy constructor"
		write(*,*) "---"
		
		call nFunc2.copy( nFunc )
		call nFunc2.show()
		
		call ofile.init( "salida2" )
		call nFunc.toFStream( ofile )
		call ofile.destroy()
		
		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		! Test from array
		write(*,*) "---"
		write(*,*) "Testing from array"
		write(*,*) "---"
		
		allocate( data(xGrid.nPoints) )
		do i=1,xGrid.nPoints
			data(i) = funcTest( xGrid.data(i) )
		end do
		
		call nFunc.fromGridArray( xGrid, yArray=data )
		call nFunc.show()
		call nFunc.save( "salida3" )
		
		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		! Test from IFStream
		write(*,*) "---"
		write(*,*) "Testing from IFStream"
		write(*,*) "---"
		
		call ifile.init( "data/formats/TWO_COLUMNS" )
		call nFunc.fromFStream( ifile, columns=[1,2] )
		call nFunc.show()
		call ifile.destroy()
		call nFunc.save( "salidaF0" )
		
		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		! Test operators
		write(*,*) "---"
		write(*,*) "Testing operators"
		write(*,*) "---"
		
		call xGrid.init( 1.0_8, 10.0_8, 100 )
		call nFunc.fromFunction( xGrid, func=funcTest )
		call nFunc2.fromFunction( xGrid, func=funcTest2 )
		call nFunc.save( "salidaF1" )
		call nFunc2.save( "salidaF2" )
		
		nFunc3 = nFunc+nFunc2
		call nFunc3.save( "salidaF1aF2" )
		
		nFunc3 = nFunc+3.0_8
		call nFunc3.save( "salidaF1a3.0" )
		
		nFunc3 = nFunc-nFunc2
		call nFunc3.save( "salidaF1mF2" )
		
		nFunc3 = nFunc-3.0_8
		call nFunc3.save( "salidaF1m3.0" )
		
		nFunc3 = nFunc*nFunc2
		call nFunc3.save( "salidaF1pF2" )
		
		nFunc3 = nFunc*3.0_8
		call nFunc3.save( "salidaF1p3.0" )
		
		nFunc3 = nFunc/nFunc2
		call nFunc3.save( "salidaF1dF2" )
		
		nFunc3 = nFunc/3.0_8
		call nFunc3.save( "salidaF1d3.0" )
		
		nFunc3 = nFunc**nFunc2
		call nFunc3.save( "salidaF1ppF2" )
		
		nFunc3 = nFunc**2.0_8
		call nFunc3.save( "salidaF1pp3.0" )
	end subroutine CNFunction_test
	
end module CNFunction_
